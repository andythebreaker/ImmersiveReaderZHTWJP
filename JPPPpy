import re

# 判斷是不是日文平假名或片假名
def contains_jp(text):
    # 平假名 \u3040-\u309F，片假名 \u30A0-\u30FF，日文句號等 \u3000-\u303F
    return re.search(r'[\u3040-\u30FF]', text) is not None

def repl_single_jp(m):
    # 單一假名、片假名字元標註
    ch = m.group(0)
    return f'</p><p class="JP">{ch}</p><p class="ZHTW">'

def mark_jp_in_zh(text):
    # 1. 處理「」內只要有日文，全包成JP
    def repl_quotes(m):
        content = m.group(1)
        if contains_jp(content):
            return f'</p><p class="JP">「{content}」</p><p class="ZHTW">'
        else:
            return f'「{content}」'
    text = re.sub(r'「(.*?)」', repl_quotes, text)

    # 2. 處理「」外的單一日文字元標註
    # 首先找出「」區間，避免誤標
    quote_spans = [m.span() for m in re.finditer(r'</p><p class="JP">「.*?」</p><p class="ZHTW">|「.*?」', text)]
    result = []
    last_end = 0
    for start, end in quote_spans:
        # 處理區間外的部分
        chunk = text[last_end:start]
        # 在這裡單字標註
        chunk = re.sub(r'[\u3040-\u30FF]', repl_single_jp, chunk)
        result.append(chunk)
        # 保留「」或已包JP的部分不再處理
        result.append(text[start:end])
        last_end = end
    # 最後一段
    chunk = text[last_end:]
    chunk = re.sub(r'[\u3040-\u30FF]', repl_single_jp, chunk)
    result.append(chunk)
    return ''.join(result)

def cleanup_xml(xml_text):
    """
    1. 移除空的DOM元素
    2. 合併相同class的相鄰DOM元素
    """
    # 使用正則表達式找出所有DOM元素
    pattern = r'<p class="([^"]+)">(.*?)</p>'
    
    # 解析XML找出所有元素
    elements = []
    for match in re.finditer(pattern, xml_text):
        class_name = match.group(1)
        content = match.group(2)
        elements.append((class_name, content))
    
    # 移除空白DOM並合併相同class的相鄰元素
    merged_elements = []
    current_class = None
    current_content = ""
    
    for class_name, content in elements:
        # 跳過空的DOM元素
        if not content.strip():
            continue
        
        # 如果與前一個元素的class相同，則合併
        if class_name == current_class:
            current_content += content
        else:
            # 保存前一個處理好的元素（如果有的話）
            if current_class:
                merged_elements.append((current_class, current_content))
            # 開始新的元素
            current_class = class_name
            current_content = content
    
    # 加入最後一個元素（如果有的話）
    if current_class:
        merged_elements.append((current_class, current_content))
    
    # 重建XML
    result = []
    for class_name, content in merged_elements:
        result.append(f'<p class="{class_name}">{content}</p>')
    
    return ' '.join(result)

def process_xml(xml_text):
    # 處理所有 ZHTW 段
    def repl(m):
        original = m.group(0)
        content = m.group(1)
        # 標註JP
        new_content = mark_jp_in_zh(content)
        return f'<p class="ZHTW">{new_content}</p>'
    
    # 只處理ZHTW
    result = re.sub(r'<p class="ZHTW">(.*?)</p>', repl, xml_text, flags=re.DOTALL)
    
    # 進行DOM清理和合併
    result = cleanup_xml(result)
    
    return result

if __name__ == "__main__":
    # 一般範例
    xml_input = '''
<p class="ZHTW">
    大家好！今天我們來學習這幾段日文，看看詞語的意思和文法的使用方式，並且搭配一些實用的片語例句。

首先是第一段：

「ひとりっこで お姉ちゃんが欲しいと思うことが あるからうれしい♡ いつかお姉さんにも 選ばれたいです！」

* 「ひとりっこ」指的是「獨生子女」。例如：「私はひとりっこです。」意思是「我是獨生子女。」
* 「お姉ちゃん」是「姐姐」的暱稱，親切的稱呼。
* 「欲しい（ほしい）」表示「想要」，例如：「アイスが欲しいです。」意思是「我想要冰淇淋。」
* 文法「～と思うことがある」表示「有時候會覺得…」，例如：「寂しいと思うことがある。」（有時候會覺得寂寞）
* 「選ばれたい」來自動詞「選ぶ」（選擇）的被動形，希望被選擇。

第二段：

「みんなに愛されてそう、いやされそうなどの声がいっぱい。」

* 「愛される」是「被喜愛」的意思。
* 「いやされる」是「療癒」的意思。
* 文法「～そう」表示「看起來好像～」。例如：「おいしそう」（看起來很好吃）、「楽しそう」（看起來很開心）。

例句：

* 「赤ちゃんみたいでかわいすぎる。」意思是「像嬰兒一樣，非常可愛。」
* 「プチモたちもメロメロ」意指「小模特兒們也迷得神魂顛倒」。

第三段：

「うれしいです♡ 私がお母さんだったら、朝が苦手だからちょっときびしいかも(笑)。」

* 「苦手（にがて）」表示「不擅長」。例如：「数学が苦手です。」（我數學不好。）
* 文法「～だったら」表示假設「如果是…的話」。例如：「雨だったら、行きません。」（如果下雨，我就不去。）
* 「きびしい」表示「嚴格」。例如：「先生はきびしいです。」（老師很嚴格。）

第四段：

「相談にのってほしい、頼りたいというプチの多し。」

* 「相談にのる」表示「給予建議」。例如：「困ったときは相談にのります。」（你困擾的時候我會給你建議。）
* 「頼りたい（たよりたい）」表示「想依靠」。例如：「友達に頼りたい。」（我想依靠朋友。）
* 「いろいろ教えてくれる」意思是「教我許多事情」。例如：「日本語を教えてくれてありがとう。」（謝謝你教我日文。）

以上這些內容希望能幫助大家更清楚日文的使用方式！
</p>

    '''
    
    print("處理一般XML範例:")
    new_xml = process_xml(xml_input)
    print(new_xml)
    
